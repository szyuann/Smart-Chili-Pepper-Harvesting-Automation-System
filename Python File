#import require package/library
import cv2
import numpy as np
import imutils
import serial
import argparse
import urllib.request
from collections import deque
import time
import asyncio

#import serial port
ser = serial.Serial('COM5', 9600, timeout=1)

# used to record the time when we processed last frame
prev_frame_time = 0

# used to record the time at which we processed current frame
new_frame_time = 0

# define the lower and upper boundaries of the "red object"
# in the HSV color space, then initialize the list of tracked points
colorLower = (0, 120, 50)
colorUpper = (40, 255, 255)

# if a video path was not supplied, grab the reference
# to the webcam
camera = cv2.VideoCapture(0)

# let robot arm go back to initial position
time.sleep(2)
ser.write(b'9')
ser.write(b'9')
time.sleep(2)

while True:
    # grab the current frame
    (grabbed, frame) = camera.read()

    frame = imutils.resize(frame, width=640)

    # if we are viewing a video and we did not grab a frame,
    # then we have reached the end of the video
    if not grabbed:
        break

    #convert frame to blur and hsv
    blurred = cv2.GaussianBlur(frame, (11, 11), 0)
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # construct a mask for the color "red", then perform
    # a series of dilations and erosions to remove any small
    # blobs left in the mask
    mask = cv2.inRange(hsv, colorLower, colorUpper)
    mask = cv2.erode(mask, None, iterations=2)
    mask = cv2.dilate(mask, None, iterations=2)

    # change the frame to gray color with thresh
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 254,255,cv2.THRESH_BINARY)
    cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,
                        cv2.CHAIN_APPROX_SIMPLE)[-2]
    center = None

    #draw square at center of the frame
    cv2.rectangle(frame, (600//2-30,490//2-30),(600//2+30,490//2+30),(0,0,0),2)

    if len(cnts) > 0:
        # find the largest contour in the mask, then use
        # it to compute the minimum enclosing circle and
        # centroid
        c = max(cnts, key=cv2.contourArea)
        ((x, y), radius) = cv2.minEnclosingCircle(c)
        M = cv2.moments(c)
        cx = int(M["m10"] / M["m00"])
        cy =  int(M["m01"] / M["m00"])
        center = (cx,cy)

        # only proceed if the radius meets a minimum size
        if radius > 5:
            # draw the circle and centroid on the frame,
            # then update the list of tracked points
            cv2.circle(frame, center, 5, (0, 0, 255), -1)

        # proceed when center enter the square
        if (cx<600//2+30 and cx>600//2-30 and cy<490//2+30 and cy>490//2-30):
            #print('grab')
            ser.write(b'6')
            ser.write(b'1')
            ser.write(b'2')
            ser.write(b'1')
            time.sleep(7)
    
    # font which we will be using to display FPS
    font = cv2.FONT_HERSHEY_SIMPLEX
    # time when we finish processing for this frame
    new_frame_time = time.time()
 
    # Calculating the fps
 
    # fps will be number of frame processed in given time frame
    # since their will be most of time error of 0.001 second
    # we will be subtracting it to get more accurate result
    fps = 1/(new_frame_time-prev_frame_time)
    prev_frame_time = new_frame_time
 
    # converting the fps into integer
    fps = int(fps)
 
    # converting the fps to string so that we can display it on frame
    # by using putText function
    fps = str(fps)
 
    # putting the FPS count on the frame
    cv2.putText(frame, fps, (580, 470), font, 1, (-100, -255, -10), 2, cv2.LINE_AA)
 
    # displaying the frame with fps
    cv2.imshow('frame', frame)
    #cv2.imshow("mask", mask)
    if cv2.waitKey(20) & 0xFF == 27:
        break

camera.release()
cv2.destroyAllWindows()
